server:
  port: 8080

spring:
#  激活指定环境
  profiles:
    active: test
  jackson: # 返回JSON的全局时间格式
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  datasource:
    #    mysql数据源
    #    name: test
    #    url: jdbc:mysql://localhost:3306/demodb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    #    username: root
    #    password: 123456
    #    driver-class-name: com.mysql.cj.jdbc.Driver
    #    sqlite数据源
    name: test
    url: jdbc:sqlite:springboot-learning/db/sqlite.db
    username:
    password:
    driver-class-name: org.sqlite.JDBC
  # Druid的其他属性配置
  druid:
    # 初始化时建立物理连接的个数
    initial-size: 5
    # 连接池的最小空闲数量
    min-idle: 5
    # 连接池最大连接数量
    max-active: 20
    # 获取连接时最大等待时间，单位毫秒
    max-wait: 60000
    # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    test-while-idle: true
    # 既作为检测的间隔时间又作为testWhileIdel执行的依据
    time-between-eviction-runs-millis: 60000
    # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
    min-evictable-idle-time-millis: 30000
    # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
    validation-query: select 1
    # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
    test-on-borrow: false
    # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
    test-on-return: false
    # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
    pool-prepared-statements: false
    # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
    filters: stat,wall,slf4j
    # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
    max-pool-prepared-statement-per-connection-size: -1
    # 合并多个DruidDataSource的监控数据
    use-global-data-source-stat: true
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  # 需要增加文件路径匹配，不然会报错，导致项目起不来
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER

#  redis:
#    database: 0
#    host: 39.96.49.72
#    lettuce:
#      pool:
#        max-active: 20
#        max-idle: 5
#        max-wait: -1
#        min-idle: 0
#    port: 6379
#    timeout: 1800000

# MyBatis-plus配置
mybatis-plus:
  #注意：一定要对应mapper映射xml文件的所在路径
  mapper-locations: classpath:com/springboot/mapper/xml/*.xml
  # 别名类型包
  type-aliases-package: com.xiaomi.springboot.entity
  global-config:
    banner: false   # 是否 mybatis-plus 在控制台输出的logo
    db-config:
      # 全局逻辑删除的字段名
      logic-delete-field: deleted
      # 逻辑已删除值(默认为 1)
      logic-delete-value: 1
      # 逻辑未删除值(默认为 0)
      logic-not-delete-value: 0
      # 主键 自增  #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID"
      id-type: auto
  configuration:
    # 开启驼峰转换;
    map-underscore-to-camel-case: true
    # MyBatis日志打印类
    # log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    # log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl   # 关闭日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl         # 打印到控制台
    auto-mapping-behavior: full

  #xxlJob
  ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
  #  xxl.job.admin.addresses=http://xxl-job:8080/xxl-job-admin/
  ### 执行器通讯TOKEN [选填]：非空时启用；
  #  xxl.job.admin.accessToken=
  ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
  #  xxl.job.admin.appname= fantasyci-xxl-job
  ### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
  #  xxl.job.admin.ip=
  ### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
  #  xxl.job.admin.port=9999
  ### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
  #  xxl.job.admin.logpath=root/logs/xxl-job/jobhandler
  ### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；
#  xxl.job.admin.logretentiondays=30
#xxl:
#  job:
#    admin:
#      addresses: http://xxl-job:8080/xxl-job-admin/
#      accessToken:
#      appname: fantasyci-xxl-job
#      ip: ''
#      port: 9999
#      logpath: root/logs/xxl-job/jobhandler
#      logretentiondays: 30
#日志设置
#logging:
#  config: classpath:logback-spring.xml
#  level:
#    root: INFO
