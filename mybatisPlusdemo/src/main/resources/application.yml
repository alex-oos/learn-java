server:
  port: 8099

#数据库 配置
spring:
  # Druid的其他属性配置
  druid:
    # 初始化时建立物理连接的个数
    initial-size: 5
    # 连接池的最小空闲数量
    min-idle: 5
    # 连接池最大连接数量
    max-active: 20
    # 获取连接时最大等待时间，单位毫秒
    max-wait: 60000
    # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    test-while-idle: true
    # 既作为检测的间隔时间又作为testWhileIdel执行的依据
    time-between-eviction-runs-millis: 60000
    # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
    min-evictable-idle-time-millis: 30000
    # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
    validation-query: select 1
    # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
    test-on-borrow: false
    # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
    test-on-return: false
    # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
    pool-prepared-statements: false
    # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
    filters: stat,wall,slf4j
    # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
    max-pool-prepared-statement-per-connection-size: -1
    # 合并多个DruidDataSource的监控数据
    use-global-data-source-stat: true
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

  datasource:
    #  mysql 数据源
    # 数据库引擎，最新的数据库都需要加入cj
    #    driver-class-name: com.mysql.cj.jdbc.Driver
    #    url: jdbc:mysql://localhost:3306/mybatis_plus_db
    #    username: root
    #    password: 123456
    #    type: com.alibaba.druid.pool.DruidDataSource  # 使用 DruidDataSource作为数据源
    # h2 数据库数据源
    #    driver-class-name: org.h2.Driver
    #    url: jdbc:h2:mem:test
    #    username: root
    #    password: test
    #  sql:
    #    init:
    #      schema-locations: classpath:db/schema-h2.sql
    #      data-locations: classpath:db/data-h2.sql
    # sqlite 数据库数据源
    driver-class-name: org.sqlite.JDBC
    #  这里因为是相对路径，所以是相对于项目的根目录
    url: jdbc:sqlite:mybatisPlusdemo/src/main/resources/db/sqlite.db
    #url：jdbc:sqlite::resources:db/demo.db  如果是单个项目，可以直接这么写
    username:
    password:


# MyBatis-plus配置
mybatis-plus:
  # xml文件位置
  mapper-locations: classpath*:mapper/*.xml
  # 别名类型包
  type-aliases-package: com.mybatisplus.entity
  global-config:
    banner: false   # 是否 mybatis-plus 在控制台输出的logo
    db-config:
      # 全局逻辑删除的字段名
      logic-delete-field: deleted
      # 逻辑已删除值(默认为 1)
      logic-delete-value: 1
      # 逻辑未删除值(默认为 0)
      logic-not-delete-value: 0
      # 主键 自增  #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID"
      id-type: auto
  configuration:
    # 开启驼峰转换;
    map-underscore-to-camel-case: true
    # MyBatis日志打印类
    # log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    # log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl   # 关闭日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl         # 打印到控制台
    auto-mapping-behavior: full
